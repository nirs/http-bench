#!/usr/bin/env python
"""
Benchmrk for uploading files using httplib.
"""

import ssl

# Disable certificate verification, not interesitng for this test
ssl._create_default_https_context = ssl._create_unverified_context

import io
import sys
import threading

from contextlib import closing

from six.moves import http_client

import bench
import util


def upload(filename, offset, size, url, blocksize):
    conn = http_client.HTTPSConnection(url.netloc)

    with io.open(filename, "rb") as f:
        f.seek(offset)
        f = util.LimitedReader(f, size)
        headers = {
            "Content-Length": str(size),
            "Content-Range": "bytes %d-%d/*" % (offset, offset + size - 1),
        }

        if sys.version_info[0] == 2:
            # In python 2 we need to use the low level apis and reimplemnt the
            # read/write loop:
            conn.putrequest("PUT", url.path)
            for name, value in headers.items():
                conn.putheader(name, value)
            conn.endheaders()
            while True:
                chunk = f.read(blocksize)
                if not chunk:
                    break
                conn.send(chunk)
        else:
            # In Python 3 we can use the high level apis.
            if sys.version_info[1] < 7:
                # Before < 3.7, we need to wrap the file with an iterator to
                # control the block size.
                f = util.BlockIterator(f, blocksize)
            else:
                # In 3.7, we can set the connection block size.
                conn.blocksize = blocksize
            conn.request("PUT", url.path, body=f, headers=headers)

    resp = conn.getresponse()
    assert resp.status == 200


with bench.run() as args:
    util.parallel(upload, args)
